/* automatically generated by rust-bindgen */

use
super::*;

pub type lv_res_t = u8;
#[doc = " Type for async callback."]
pub type lv_async_cb_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::cty::c_void)>;
#[repr(C)]
pub struct _lv_async_info_t {
    pub cb: lv_async_cb_t,
    pub user_data: *mut ::cty::c_void,
}
impl Default for _lv_async_info_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type lv_async_info_t = _lv_async_info_t;
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    #[doc = " Call an asynchronous function the next time lv_task_handler() is run. This function is likely to return"]
    #[doc = " **before** the call actually happens!"]
    #[doc = " - __`async_xcb`__: a callback which is the task itself."]
    #[doc = "                 (the 'x' in the argument name indicates that its not a fully generic function because it not follows"]
    #[doc = "                  the `func_name(object, callback, ...)` convention)"]
    #[doc = " - __`user_data`__: custom parameter"]
    pub fn lv_async_call(async_xcb: lv_async_cb_t, user_data: *mut ::cty::c_void) -> lv_res_t;
}
