/* automatically generated by rust-bindgen */

use
super::*;

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub const LV_STYLE_ID_MASK: u32 = 255;
pub const LV_STYLE_ATTR_NONE: u32 = 0;
pub const LV_STYLE_ATTR_INHERIT: u32 = 128;
pub const LV_STYLE_TRANS_NUM_MAX: u32 = 6;
pub const LV_STYLE_PROP_ALL: u32 = 255;
pub const LV_STYLE_ID_VALUE: u32 = 0;
pub const LV_STYLE_ID_COLOR: u32 = 9;
pub const LV_STYLE_ID_OPA: u32 = 12;
pub const LV_STYLE_ID_PTR: u32 = 14;
pub const LV_STYLE_STATE_POS: u32 = 8;
pub const LV_STYLE_STATE_MASK: u32 = 32512;
pub const LV_STYLE_INHERIT_MASK: u32 = 32768;
pub type lv_coord_t = i16;
pub type lv_anim_user_data_t = *mut ::cty::c_void;
pub type lv_font_user_data_t = *mut ::cty::c_void;
pub type lv_align_t = u8;
#[doc = " Describes the properties of a glyph."]
#[repr(C)]
#[derive(Default)]
pub struct lv_font_glyph_dsc_t {
    #[doc = "< The glyph needs this space. Draw the next glyph after this width. 8 bit integer, 4 bit fractional"]
    pub adv_w: u16,
    #[doc = "< Width of the glyph's bounding box"]
    pub box_w: u16,
    #[doc = "< Height of the glyph's bounding box"]
    pub box_h: u16,
    #[doc = "< x offset of the bounding box"]
    pub ofs_x: i16,
    #[doc = "< y offset of the bounding box"]
    pub ofs_y: i16,
    #[doc = "< Bit-per-pixel: 1, 2, 4, 8"]
    pub bpp: u8,
}
#[doc = " Describe the properties of a font"]
#[repr(C)]
pub struct _lv_font_struct {
    #[doc = " Get a glyph's  descriptor from a font"]
    pub get_glyph_dsc: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const _lv_font_struct,
            arg2: *mut lv_font_glyph_dsc_t,
            letter: u32,
            letter_next: u32,
        ) -> bool,
    >,
    #[doc = " Get a glyph's bitmap from a font"]
    pub get_glyph_bitmap: ::core::option::Option<
        unsafe extern "C" fn(arg1: *const _lv_font_struct, arg2: u32) -> *const u8,
    >,
    #[doc = "< The real line height where any text fits"]
    pub line_height: lv_coord_t,
    #[doc = "< Base line measured from the top of the line_height"]
    pub base_line: lv_coord_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    #[doc = "< Distance between the top of the underline and base line (< 0 means below the base line)"]
    pub underline_position: i8,
    #[doc = "< Thickness of the underline"]
    pub underline_thickness: i8,
    #[doc = "< Store implementation specific or run_time data or caching here"]
    pub dsc: *mut ::cty::c_void,
    #[doc = "< Custom user data for font."]
    pub user_data: lv_font_user_data_t,
}
impl Default for _lv_font_struct {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl _lv_font_struct {
    #[inline]
    pub fn subpx(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_subpx(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(subpx: u8) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let subpx: u8 = unsafe { ::core::mem::transmute(subpx) };
            subpx as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type lv_font_t = _lv_font_struct;
#[repr(C)]
pub struct lv_color16_t {
    pub ch: __BindgenUnionField<lv_color16_t__bindgen_ty_1>,
    pub full: __BindgenUnionField<u16>,
    pub bindgen_union_field: u16,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Default)]
pub struct lv_color16_t__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u8>,
}
impl lv_color16_t__bindgen_ty_1 {
    #[inline]
    pub fn green_h(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_green_h(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn red(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_red(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn blue(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_blue(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn green_l(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_green_l(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        green_h: u16,
        red: u16,
        blue: u16,
        green_l: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let green_h: u16 = unsafe { ::core::mem::transmute(green_h) };
            green_h as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let red: u16 = unsafe { ::core::mem::transmute(red) };
            red as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let blue: u16 = unsafe { ::core::mem::transmute(blue) };
            blue as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let green_l: u16 = unsafe { ::core::mem::transmute(green_l) };
            green_l as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for lv_color16_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type lv_color_t = lv_color16_t;
#[doc = "! @cond Doxygen_Suppress"]
pub type lv_opa_t = u8;
#[doc = " Type of the animated value"]
pub type lv_anim_value_t = lv_coord_t;
#[doc = " Get the current value during an animation"]
pub type lv_anim_path_cb_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: *const _lv_anim_path_t, arg2: *const _lv_anim_t) -> lv_anim_value_t,
>;
#[repr(C)]
pub struct _lv_anim_path_t {
    pub cb: lv_anim_path_cb_t,
    pub user_data: *mut ::cty::c_void,
}
impl Default for _lv_anim_path_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type lv_anim_path_t = _lv_anim_path_t;
#[doc = " Generic prototype of \"animator\" functions."]
#[doc = " First parameter is the variable to animate."]
#[doc = " Second parameter is the value to set."]
#[doc = " Compatible with `lv_xxx_set_yyy(obj, value)` functions"]
#[doc = " The `x` in `_xcb_t` means its not a fully generic prototype because"]
#[doc = " it doesn't receive `lv_anim_t *` as its first argument"]
pub type lv_anim_exec_xcb_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::cty::c_void, arg2: lv_anim_value_t)>;
#[doc = " Callback to call when the animation is ready"]
pub type lv_anim_ready_cb_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut _lv_anim_t)>;
#[doc = " Callback to call when the animation really stars (considering `delay`)"]
pub type lv_anim_start_cb_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut _lv_anim_t)>;
#[doc = " Describes an animation"]
#[repr(C)]
pub struct _lv_anim_t {
    #[doc = "<Variable to animate"]
    pub var: *mut ::cty::c_void,
    #[doc = "< Function to execute to animate"]
    pub exec_cb: lv_anim_exec_xcb_t,
    #[doc = "< Call it when the animation is starts (considering `delay`)"]
    pub start_cb: lv_anim_start_cb_t,
    #[doc = "< Call it when the animation is ready"]
    pub ready_cb: lv_anim_ready_cb_t,
    #[doc = "< Describe the path (curve) of animations"]
    pub path: lv_anim_path_t,
    #[doc = "< Start value"]
    pub start: i32,
    #[doc = "< Current value"]
    pub current: i32,
    #[doc = "< End value"]
    pub end: i32,
    #[doc = "< Animation time in ms"]
    pub time: i32,
    #[doc = "< Current time in animation. Set to negative to make delay."]
    pub act_time: i32,
    #[doc = "< Wait before play back"]
    pub playback_delay: u32,
    #[doc = "< Duration of playback animation"]
    pub playback_time: u32,
    #[doc = "< Wait before repeat"]
    pub repeat_delay: u32,
    #[doc = "< Repeat count for the animation"]
    pub repeat_cnt: u16,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    #[doc = "< Custom user data"]
    pub user_data: lv_anim_user_data_t,
    pub time_orig: u32,
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl Default for _lv_anim_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl _lv_anim_t {
    #[inline]
    pub fn early_apply(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_early_apply(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(early_apply: u8) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let early_apply: u8 = unsafe { ::core::mem::transmute(early_apply) };
            early_apply as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn playback_now(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_playback_now(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_run(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_run(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        playback_now: u8,
        has_run: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let playback_now: u8 = unsafe { ::core::mem::transmute(playback_now) };
            playback_now as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let has_run: u32 = unsafe { ::core::mem::transmute(has_run) };
            has_run as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type lv_blend_mode_t = u8;
pub type lv_border_side_t = u8;
pub type lv_grad_dir_t = u8;
pub type lv_text_decor_t = u8;
pub type lv_style_attr_t = u8;
pub const LV_STYLE_RADIUS: _bindgen_ty_14 = 1;
pub const LV_STYLE_CLIP_CORNER: _bindgen_ty_14 = 2;
pub const LV_STYLE_SIZE: _bindgen_ty_14 = 3;
pub const LV_STYLE_TRANSFORM_WIDTH: _bindgen_ty_14 = 4;
pub const LV_STYLE_TRANSFORM_HEIGHT: _bindgen_ty_14 = 5;
pub const LV_STYLE_TRANSFORM_ANGLE: _bindgen_ty_14 = 6;
pub const LV_STYLE_TRANSFORM_ZOOM: _bindgen_ty_14 = 7;
pub const LV_STYLE_OPA_SCALE: _bindgen_ty_14 = 32780;
pub const LV_STYLE_PAD_TOP: _bindgen_ty_14 = 16;
pub const LV_STYLE_PAD_BOTTOM: _bindgen_ty_14 = 17;
pub const LV_STYLE_PAD_LEFT: _bindgen_ty_14 = 18;
pub const LV_STYLE_PAD_RIGHT: _bindgen_ty_14 = 19;
pub const LV_STYLE_PAD_INNER: _bindgen_ty_14 = 20;
pub const LV_STYLE_MARGIN_TOP: _bindgen_ty_14 = 21;
pub const LV_STYLE_MARGIN_BOTTOM: _bindgen_ty_14 = 22;
pub const LV_STYLE_MARGIN_LEFT: _bindgen_ty_14 = 23;
pub const LV_STYLE_MARGIN_RIGHT: _bindgen_ty_14 = 24;
pub const LV_STYLE_BG_BLEND_MODE: _bindgen_ty_14 = 32;
pub const LV_STYLE_BG_MAIN_STOP: _bindgen_ty_14 = 33;
pub const LV_STYLE_BG_GRAD_STOP: _bindgen_ty_14 = 34;
pub const LV_STYLE_BG_GRAD_DIR: _bindgen_ty_14 = 35;
pub const LV_STYLE_BG_COLOR: _bindgen_ty_14 = 41;
pub const LV_STYLE_BG_GRAD_COLOR: _bindgen_ty_14 = 42;
pub const LV_STYLE_BG_OPA: _bindgen_ty_14 = 44;
pub const LV_STYLE_BORDER_WIDTH: _bindgen_ty_14 = 48;
pub const LV_STYLE_BORDER_SIDE: _bindgen_ty_14 = 49;
pub const LV_STYLE_BORDER_BLEND_MODE: _bindgen_ty_14 = 50;
pub const LV_STYLE_BORDER_POST: _bindgen_ty_14 = 51;
pub const LV_STYLE_BORDER_COLOR: _bindgen_ty_14 = 57;
pub const LV_STYLE_BORDER_OPA: _bindgen_ty_14 = 60;
pub const LV_STYLE_OUTLINE_WIDTH: _bindgen_ty_14 = 64;
pub const LV_STYLE_OUTLINE_PAD: _bindgen_ty_14 = 65;
pub const LV_STYLE_OUTLINE_BLEND_MODE: _bindgen_ty_14 = 66;
pub const LV_STYLE_OUTLINE_COLOR: _bindgen_ty_14 = 73;
pub const LV_STYLE_OUTLINE_OPA: _bindgen_ty_14 = 76;
pub const LV_STYLE_SHADOW_WIDTH: _bindgen_ty_14 = 80;
pub const LV_STYLE_SHADOW_OFS_X: _bindgen_ty_14 = 81;
pub const LV_STYLE_SHADOW_OFS_Y: _bindgen_ty_14 = 82;
pub const LV_STYLE_SHADOW_SPREAD: _bindgen_ty_14 = 83;
pub const LV_STYLE_SHADOW_BLEND_MODE: _bindgen_ty_14 = 84;
pub const LV_STYLE_SHADOW_COLOR: _bindgen_ty_14 = 89;
pub const LV_STYLE_SHADOW_OPA: _bindgen_ty_14 = 92;
pub const LV_STYLE_PATTERN_BLEND_MODE: _bindgen_ty_14 = 96;
pub const LV_STYLE_PATTERN_REPEAT: _bindgen_ty_14 = 97;
pub const LV_STYLE_PATTERN_RECOLOR: _bindgen_ty_14 = 105;
pub const LV_STYLE_PATTERN_OPA: _bindgen_ty_14 = 108;
pub const LV_STYLE_PATTERN_RECOLOR_OPA: _bindgen_ty_14 = 109;
pub const LV_STYLE_PATTERN_IMAGE: _bindgen_ty_14 = 110;
pub const LV_STYLE_VALUE_LETTER_SPACE: _bindgen_ty_14 = 112;
pub const LV_STYLE_VALUE_LINE_SPACE: _bindgen_ty_14 = 113;
pub const LV_STYLE_VALUE_BLEND_MODE: _bindgen_ty_14 = 114;
pub const LV_STYLE_VALUE_OFS_X: _bindgen_ty_14 = 115;
pub const LV_STYLE_VALUE_OFS_Y: _bindgen_ty_14 = 116;
pub const LV_STYLE_VALUE_ALIGN: _bindgen_ty_14 = 117;
pub const LV_STYLE_VALUE_COLOR: _bindgen_ty_14 = 121;
pub const LV_STYLE_VALUE_OPA: _bindgen_ty_14 = 124;
pub const LV_STYLE_VALUE_FONT: _bindgen_ty_14 = 126;
pub const LV_STYLE_VALUE_STR: _bindgen_ty_14 = 127;
pub const LV_STYLE_TEXT_LETTER_SPACE: _bindgen_ty_14 = 32896;
pub const LV_STYLE_TEXT_LINE_SPACE: _bindgen_ty_14 = 32897;
pub const LV_STYLE_TEXT_DECOR: _bindgen_ty_14 = 32898;
pub const LV_STYLE_TEXT_BLEND_MODE: _bindgen_ty_14 = 32899;
pub const LV_STYLE_TEXT_COLOR: _bindgen_ty_14 = 32905;
pub const LV_STYLE_TEXT_SEL_COLOR: _bindgen_ty_14 = 32906;
pub const LV_STYLE_TEXT_OPA: _bindgen_ty_14 = 32908;
pub const LV_STYLE_TEXT_FONT: _bindgen_ty_14 = 32910;
pub const LV_STYLE_LINE_WIDTH: _bindgen_ty_14 = 144;
pub const LV_STYLE_LINE_BLEND_MODE: _bindgen_ty_14 = 145;
pub const LV_STYLE_LINE_DASH_WIDTH: _bindgen_ty_14 = 146;
pub const LV_STYLE_LINE_DASH_GAP: _bindgen_ty_14 = 147;
pub const LV_STYLE_LINE_ROUNDED: _bindgen_ty_14 = 148;
pub const LV_STYLE_LINE_COLOR: _bindgen_ty_14 = 153;
pub const LV_STYLE_LINE_OPA: _bindgen_ty_14 = 156;
pub const LV_STYLE_IMAGE_BLEND_MODE: _bindgen_ty_14 = 32928;
pub const LV_STYLE_IMAGE_RECOLOR: _bindgen_ty_14 = 32937;
pub const LV_STYLE_IMAGE_OPA: _bindgen_ty_14 = 32940;
pub const LV_STYLE_IMAGE_RECOLOR_OPA: _bindgen_ty_14 = 32941;
pub const LV_STYLE_TRANSITION_TIME: _bindgen_ty_14 = 176;
pub const LV_STYLE_TRANSITION_DELAY: _bindgen_ty_14 = 177;
pub const LV_STYLE_TRANSITION_PROP_1: _bindgen_ty_14 = 178;
pub const LV_STYLE_TRANSITION_PROP_2: _bindgen_ty_14 = 179;
pub const LV_STYLE_TRANSITION_PROP_3: _bindgen_ty_14 = 180;
pub const LV_STYLE_TRANSITION_PROP_4: _bindgen_ty_14 = 181;
pub const LV_STYLE_TRANSITION_PROP_5: _bindgen_ty_14 = 182;
pub const LV_STYLE_TRANSITION_PROP_6: _bindgen_ty_14 = 183;
pub const LV_STYLE_TRANSITION_PATH: _bindgen_ty_14 = 190;
pub const LV_STYLE_SCALE_WIDTH: _bindgen_ty_14 = 192;
pub const LV_STYLE_SCALE_BORDER_WIDTH: _bindgen_ty_14 = 193;
pub const LV_STYLE_SCALE_END_BORDER_WIDTH: _bindgen_ty_14 = 194;
pub const LV_STYLE_SCALE_END_LINE_WIDTH: _bindgen_ty_14 = 195;
pub const LV_STYLE_SCALE_GRAD_COLOR: _bindgen_ty_14 = 201;
pub const LV_STYLE_SCALE_END_COLOR: _bindgen_ty_14 = 202;
pub type _bindgen_ty_14 = u32;
pub type lv_style_property_t = u16;
pub type lv_style_state_t = u16;
#[repr(C)]
pub struct lv_style_t {
    pub map: *mut u8,
}
impl Default for lv_style_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type lv_style_int_t = i16;
#[repr(C)]
pub struct lv_style_list_t {
    pub style_list: *mut *mut lv_style_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub __bindgen_padding_0: u32,
}
impl Default for lv_style_list_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl lv_style_list_t {
    #[inline]
    pub fn style_cnt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_style_cnt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn has_local(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_local(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_trans(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_trans(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn skip_trans(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip_trans(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore_trans(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ignore_trans(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn valid_cache(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_valid_cache(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore_cache(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ignore_cache(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn radius_zero(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_radius_zero(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn opa_scale_cover(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_opa_scale_cover(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn clip_corner_off(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clip_corner_off(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn transform_all_zero(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_all_zero(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pad_all_zero(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pad_all_zero(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn blend_mode_all_normal(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_blend_mode_all_normal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bg_opa_transp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bg_opa_transp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bg_opa_cover(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bg_opa_cover(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bg_grad_dir_none(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bg_grad_dir_none(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn border_width_zero(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_border_width_zero(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn border_side_full(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_border_side_full(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn border_post_off(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_border_post_off(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn outline_width_zero(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_outline_width_zero(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pattern_img_null(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pattern_img_null(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn shadow_width_zero(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_shadow_width_zero(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn value_txt_str(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_value_txt_str(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn img_recolor_opa_transp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_img_recolor_opa_transp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn text_space_zero(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_text_space_zero(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn text_decor_none(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_text_decor_none(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn text_font_normal(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_text_font_normal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        style_cnt: u32,
        has_local: u32,
        has_trans: u32,
        skip_trans: u32,
        ignore_trans: u32,
        valid_cache: u32,
        ignore_cache: u32,
        radius_zero: u32,
        opa_scale_cover: u32,
        clip_corner_off: u32,
        transform_all_zero: u32,
        pad_all_zero: u32,
        blend_mode_all_normal: u32,
        bg_opa_transp: u32,
        bg_opa_cover: u32,
        bg_grad_dir_none: u32,
        border_width_zero: u32,
        border_side_full: u32,
        border_post_off: u32,
        outline_width_zero: u32,
        pattern_img_null: u32,
        shadow_width_zero: u32,
        value_txt_str: u32,
        img_recolor_opa_transp: u32,
        text_space_zero: u32,
        text_decor_none: u32,
        text_font_normal: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let style_cnt: u32 = unsafe { ::core::mem::transmute(style_cnt) };
            style_cnt as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let has_local: u32 = unsafe { ::core::mem::transmute(has_local) };
            has_local as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let has_trans: u32 = unsafe { ::core::mem::transmute(has_trans) };
            has_trans as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let skip_trans: u32 = unsafe { ::core::mem::transmute(skip_trans) };
            skip_trans as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let ignore_trans: u32 = unsafe { ::core::mem::transmute(ignore_trans) };
            ignore_trans as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let valid_cache: u32 = unsafe { ::core::mem::transmute(valid_cache) };
            valid_cache as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let ignore_cache: u32 = unsafe { ::core::mem::transmute(ignore_cache) };
            ignore_cache as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let radius_zero: u32 = unsafe { ::core::mem::transmute(radius_zero) };
            radius_zero as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let opa_scale_cover: u32 = unsafe { ::core::mem::transmute(opa_scale_cover) };
            opa_scale_cover as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let clip_corner_off: u32 = unsafe { ::core::mem::transmute(clip_corner_off) };
            clip_corner_off as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let transform_all_zero: u32 = unsafe { ::core::mem::transmute(transform_all_zero) };
            transform_all_zero as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let pad_all_zero: u32 = unsafe { ::core::mem::transmute(pad_all_zero) };
            pad_all_zero as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let blend_mode_all_normal: u32 =
                unsafe { ::core::mem::transmute(blend_mode_all_normal) };
            blend_mode_all_normal as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let bg_opa_transp: u32 = unsafe { ::core::mem::transmute(bg_opa_transp) };
            bg_opa_transp as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let bg_opa_cover: u32 = unsafe { ::core::mem::transmute(bg_opa_cover) };
            bg_opa_cover as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let bg_grad_dir_none: u32 = unsafe { ::core::mem::transmute(bg_grad_dir_none) };
            bg_grad_dir_none as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let border_width_zero: u32 = unsafe { ::core::mem::transmute(border_width_zero) };
            border_width_zero as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let border_side_full: u32 = unsafe { ::core::mem::transmute(border_side_full) };
            border_side_full as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let border_post_off: u32 = unsafe { ::core::mem::transmute(border_post_off) };
            border_post_off as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let outline_width_zero: u32 = unsafe { ::core::mem::transmute(outline_width_zero) };
            outline_width_zero as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let pattern_img_null: u32 = unsafe { ::core::mem::transmute(pattern_img_null) };
            pattern_img_null as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let shadow_width_zero: u32 = unsafe { ::core::mem::transmute(shadow_width_zero) };
            shadow_width_zero as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let value_txt_str: u32 = unsafe { ::core::mem::transmute(value_txt_str) };
            value_txt_str as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let img_recolor_opa_transp: u32 =
                unsafe { ::core::mem::transmute(img_recolor_opa_transp) };
            img_recolor_opa_transp as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let text_space_zero: u32 = unsafe { ::core::mem::transmute(text_space_zero) };
            text_space_zero as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let text_decor_none: u32 = unsafe { ::core::mem::transmute(text_decor_none) };
            text_decor_none as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let text_font_normal: u32 = unsafe { ::core::mem::transmute(text_font_normal) };
            text_font_normal as u64
        });
        __bindgen_bitfield_unit
    }
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    #[doc = " Initialize a style"]
    #[doc = " - __`style`__: pointer to a style to initialize"]
    pub fn lv_style_init(style: *mut lv_style_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    #[doc = " Copy a style with all its properties"]
    #[doc = " - __`style_dest`__: pointer to the destination style. (Should be initialized with `lv_style_init()`)"]
    #[doc = " - __`style_src`__: pointer to the source (to copy )style"]
    pub fn lv_style_copy(style_dest: *mut lv_style_t, style_src: *const lv_style_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    #[doc = " Initialize a style list"]
    #[doc = " - __`list`__: a style list to initialize"]
    pub fn lv_style_list_init(list: *mut lv_style_list_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    #[doc = " Copy a style list with all its styles and local style properties"]
    #[doc = " - __`list_dest`__: pointer to the destination style list. (should be initialized with `lv_style_list_init()`)"]
    #[doc = " - __`list_src`__: pointer to the source (to copy) style list."]
    pub fn lv_style_list_copy(list_dest: *mut lv_style_list_t, list_src: *const lv_style_list_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_list_get_style(list: *mut lv_style_list_t, id: u8) -> *mut lv_style_t;
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    #[doc = " Clear all properties from a style and all allocated memories."]
    #[doc = " - __`style`__: pointer to a style"]
    pub fn lv_style_reset(style: *mut lv_style_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    #[doc = " Remove a property from a style"]
    #[doc = " - __`style`__: pointer to a style"]
    #[doc = " - __`prop`__:  a style property ORed with a state."]
    #[doc = " E.g. `LV_STYLE_BORDER_WIDTH | (LV_STATE_PRESSED << LV_STYLE_STATE_POS)`"]
    #[doc = " Return: true: the property was found and removed; false: the property wasn't found"]
    pub fn lv_style_remove_prop(style: *mut lv_style_t, prop: lv_style_property_t) -> bool;
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    #[doc = " Get the local style of a style list"]
    #[doc = " - __`list`__: pointer to a style list where the local property should be set"]
    #[doc = " Return: pointer to the local style if exists else `NULL`."]
    pub fn lv_style_list_get_local_style(list: *mut lv_style_list_t) -> *mut lv_style_t;
}
pub type lv_state_t = u8;
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_radius(style: *mut lv_style_t, state: lv_state_t, value: lv_style_int_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_clip_corner(style: *mut lv_style_t, state: lv_state_t, value: bool);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_size(style: *mut lv_style_t, state: lv_state_t, value: lv_style_int_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_transform_width(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_transform_height(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_transform_angle(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_transform_zoom(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_opa_scale(style: *mut lv_style_t, state: lv_state_t, value: lv_opa_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_pad_top(style: *mut lv_style_t, state: lv_state_t, value: lv_style_int_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_pad_bottom(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_pad_left(style: *mut lv_style_t, state: lv_state_t, value: lv_style_int_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_pad_right(style: *mut lv_style_t, state: lv_state_t, value: lv_style_int_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_pad_inner(style: *mut lv_style_t, state: lv_state_t, value: lv_style_int_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_margin_top(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_margin_bottom(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_margin_left(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_margin_right(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_bg_blend_mode(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_blend_mode_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_bg_main_stop(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_bg_grad_stop(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_bg_grad_dir(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_grad_dir_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_bg_color(style: *mut lv_style_t, state: lv_state_t, value: lv_color_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_bg_grad_color(style: *mut lv_style_t, state: lv_state_t, value: lv_color_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_bg_opa(style: *mut lv_style_t, state: lv_state_t, value: lv_opa_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_border_width(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_border_side(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_border_side_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_border_blend_mode(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_blend_mode_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_border_post(style: *mut lv_style_t, state: lv_state_t, value: bool);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_border_color(style: *mut lv_style_t, state: lv_state_t, value: lv_color_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_border_opa(style: *mut lv_style_t, state: lv_state_t, value: lv_opa_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_outline_width(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_outline_pad(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_outline_blend_mode(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_blend_mode_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_outline_color(style: *mut lv_style_t, state: lv_state_t, value: lv_color_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_outline_opa(style: *mut lv_style_t, state: lv_state_t, value: lv_opa_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_shadow_width(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_shadow_ofs_x(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_shadow_ofs_y(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_shadow_spread(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_shadow_blend_mode(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_blend_mode_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_shadow_color(style: *mut lv_style_t, state: lv_state_t, value: lv_color_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_shadow_opa(style: *mut lv_style_t, state: lv_state_t, value: lv_opa_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_pattern_repeat(style: *mut lv_style_t, state: lv_state_t, value: bool);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_pattern_blend_mode(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_blend_mode_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_pattern_recolor(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_color_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_pattern_opa(style: *mut lv_style_t, state: lv_state_t, value: lv_opa_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_pattern_recolor_opa(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_opa_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_pattern_image(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: *const ::cty::c_void,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_value_letter_space(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_value_line_space(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_value_blend_mode(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_blend_mode_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_value_ofs_x(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_value_ofs_y(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_value_align(style: *mut lv_style_t, state: lv_state_t, value: lv_align_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_value_color(style: *mut lv_style_t, state: lv_state_t, value: lv_color_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_value_opa(style: *mut lv_style_t, state: lv_state_t, value: lv_opa_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_value_font(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: *const lv_font_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_value_str(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: *const ::cty::c_char,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_text_letter_space(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_text_line_space(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_text_decor(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_text_decor_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_text_blend_mode(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_blend_mode_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_text_color(style: *mut lv_style_t, state: lv_state_t, value: lv_color_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_text_sel_color(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_color_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_text_opa(style: *mut lv_style_t, state: lv_state_t, value: lv_opa_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_text_font(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: *const lv_font_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_line_width(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_line_blend_mode(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_blend_mode_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_line_dash_width(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_line_dash_gap(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_line_rounded(style: *mut lv_style_t, state: lv_state_t, value: bool);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_line_color(style: *mut lv_style_t, state: lv_state_t, value: lv_color_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_line_opa(style: *mut lv_style_t, state: lv_state_t, value: lv_opa_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_image_blend_mode(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_blend_mode_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_image_recolor(style: *mut lv_style_t, state: lv_state_t, value: lv_color_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_image_opa(style: *mut lv_style_t, state: lv_state_t, value: lv_opa_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_image_recolor_opa(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_opa_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_transition_time(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_transition_delay(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_transition_prop_1(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_transition_prop_2(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_transition_prop_3(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_transition_prop_4(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_transition_prop_5(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_transition_prop_6(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_transition_path(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: *mut lv_anim_path_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_scale_width(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_scale_border_width(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_scale_end_border_width(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_scale_end_line_width(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_scale_grad_color(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_color_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_scale_end_color(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_color_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_pad_all(style: *mut lv_style_t, state: lv_state_t, value: lv_style_int_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_pad_hor(style: *mut lv_style_t, state: lv_state_t, value: lv_style_int_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_pad_ver(style: *mut lv_style_t, state: lv_state_t, value: lv_style_int_t);
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_margin_all(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_margin_hor(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
#[lvgl_macros::safe_wrap(attr)] extern "C" {
    pub fn lv_style_set_margin_ver(
        style: *mut lv_style_t,
        state: lv_state_t,
        value: lv_style_int_t,
    );
}
